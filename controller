controller.js

  const User = require('../models/User');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');

const generateToken = (id) => {
  return jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: '30d' });
};

exports.registerUser = async (req, res) => {
  const { firstName, lastName, email, phoneNumber, role, password } = req.body;

  try {
    const userExists = await User.findOne({ email });

    if (userExists) {
      return res.status(400).json({ message: 'User already exists' });
    }

    const user = await User.create({
      firstName,
      lastName,
      email,
      phoneNumber,
      role,
      password,
    });

    res.status(201).json({
      _id: user._id,
      firstName: user.firstName,
      lastName: user.lastName,
      email: user.email,
      phoneNumber: user.phoneNumber,
      role: user.role,
      token: generateToken(user._id),
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

exports.loginUser = async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });

    if (user && (await user.matchPassword(password))) {
      res.json({
        _id: user._id,
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        phoneNumber: user.phoneNumber,
        role: user.role,
        token: generateToken(user._id),
      });
    } else {
      res.status(401).json({ message: 'Invalid email or password' });
    }
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};



autocontroller.js

  const Property = require('../models/Property');
const User = require('../models/User');
const nodemailer = require('nodemailer');

exports.createProperty = async (req, res) => {
  const { location, price, size, amenities } = req.body;

  try {
    const property = await Property.create({
      owner: req.user._id,
      location,
      price,
      size,
      amenities,
    });

    res.status(201).json(property);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

exports.getProperties = async (req, res) => {
  const { price, location, size } = req.query;
  const query = {};

  if (price) query.price = { $lte: price };
  if (location) query.location = location;
  if (size) query.size = size;

  try {
    const properties = await Property.find(query).populate('owner', 'firstName lastName email phoneNumber');
    res.json(properties);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

exports.updateProperty = async (req, res) => {
  const { id } = req.params;
  const { location, price, size, amenities } = req.body;

  try {
    const property = await Property.findById(id);

    if (!property) {
      return res.status(404).json({ message: 'Property not found' });
    }

    if (property.owner.toString() !== req.user._id.toString()) {
      return res.status(401).json({ message: 'Not authorized' });
    }

    property.location = location || property.location;
    property.price = price || property.price;
    property.size = size || property.size;
    property.amenities = amenities || property.amenities;

    await property.save();
    res.json(property);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

exports.deleteProperty = async (req, res) => {
  const { id } = req.params;

  try {
    const property = await Property.findById(id);

    if (!property) {
      return res.status(404).json({ message: 'Property not found' });
    }

    if (property.owner.toString() !== req.user._id.toString()) {
      return res.status(401).json({ message: 'Not authorized' });
    }

    await property.remove();
    res.json({ message: 'Property removed' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

exports.likeProperty = async (req, res) => {
  const { id } = req.params;

  try {
    const property = await Property.findById(id);

    if (!property) {
      return res.status(404).json({ message: 'Property not found' });
    }

    property.likes += 1;
    await property.save();
    res.json(property);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

exports.interestProperty = async (req, res) => {
  const { id } = req.params;
  const user = req.user;

  try {
    const property = await Property.findById(id).populate('owner', 'email phoneNumber firstName lastName');

    if (!property) {
      return res.status(404).json({ message: 'Property not found' });
    }

    const seller = property.owner;

    const transporter = nodemailer.createTransport({
      service: 'Gmail',
      auth: {
        user: process.env.EMAIL,
        pass: process.env.EMAIL_PASSWORD,
      },
    });

    const buyerMailOptions = {
      from: process.env.EMAIL,
      to: user.email,
      subject: 'Property Interest',
      text: `You expressed interest in a property. Here are the seller's contact details: 
             Name: ${seller.firstName} ${seller.lastName}
             Email: ${seller.email}
             Phone: ${seller.phoneNumber}`
    };

    const sellerMailOptions = {
      from: process.env.EMAIL,
      to: seller.email,
      subject: 'Property Interest Notification',
      text: `A user expressed interest in your property. Here are the buyer's contact details: 
             Name: ${user.firstName} ${user.lastName}
             Email: ${user.email}
             Phone: ${user.phoneNumber}`
    };

    await transporter.sendMail(buyerMailOptions);
    await transporter.sendMail(sellerMailOptions);

    res.json({ message: 'Interest expressed and notifications sent
